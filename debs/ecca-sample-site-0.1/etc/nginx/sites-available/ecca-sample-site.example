## nginx.conf for Ecca sample site

## to be included from debians /etc/nginx/nginx.conf

   # lua_code_cache off;

   ## our memcacheDB server that stores persistent data:
   ## - the current list of favorite numbers;
   ## - each users' list of old numbers.
   upstream numbers_store {
       server 127.0.0.1:21201;
       keepalive 2;
   }

    # HTTPS server
    # Runs the open pages, ie, accessible to anyone.
    server {
        listen               443;
	listen		     [::]:443;
	keepalive_timeout    30;
        server_name   	     www.sample.site;
	# server_name must match the CN in the ssl-certificate. 
	# postinst should take care of this.

	default_type text/html;

	## We use ssl for both server and clients authentication.
	## This key is made by sample-server postinst and for now must
	## be signed with the Ecca Root key.
        ssl                  on;
        ssl_certificate      /etc/ecca/sample/sample-server-cert-chain.pem;
        ssl_certificate_key  /etc/ecca/sample/sample-server-key.pem;

        ssl_session_timeout  10m;
	ssl_session_cache    shared:SSL:10m;

        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers          HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;


	## This is important, we accept clients only when signed by our own localCA!
	## If starting this site break here, please set up ecca_x.y.deb first.
	ssl_client_certificate /etc/ecca/subCA/chained-cacert.pem;

	## we set to optional so we can allow some pages non-authenticated 
	## welcome pages, help pages and errors.
	ssl_verify_client      optional;
	#ssl_verify_client      on;

	## There is one sublevel, so we verify 1 root level and 1 sublevel
	ssl_verify_depth       2; 

	## This is the document root.
	root  /usr/share/ecca-sample-site/htdocs;
	
	## show welcome page and free to watch pages
        location / {
	    index index.html;
        }

	## reading the numbers is free to the world
	location /show {
	    content_by_lua_file /usr/share/ecca-sample-site/scripts/show.lua;
	}

	## sharing your numbers requires authentication
	location /share {
	    access_by_lua '
	        if ngx.var.ssl_client_verify == "SUCCESS" then
		    return
		end
		ngx.exit(401)  -- unauthorized; show 401 page below.
	    ';
	    content_by_lua_file /usr/share/ecca-sample-site/scripts/share.lua;
	}

	## if no authentication provided, show page with link to CA to sign up.
	error_page  401	     	     /401.html;

	## Alternative for /401.html
	#location = /401.html {
    	#    content_by_lua '
	#        ngx.say("<h1>401 - Authorization requested</h1><p>Result was: " .. 
	#			(ngx.var.ssl_client_verify or "(none)") .. 
	#		        "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
	#	    		"<br>signed by " .. (ngx.var.ssl_client_i_dn or "(none)"))
	#      '; 
	#}
	
	
	## wrong authentication provided
	## advise user to log out and try a different one (of this CA!).
	error_page  403              /403.html;

	## the nginx error code  when for when there is an error in client certification
	## ask customer to provide certificate from right authority or 
	## ask them create a new identity
	error_page  495              /495.html;
	location = /495.html {
    	    content_by_lua '
	        ngx.say("<h1>495 - Wrong certificate authority</h1><p>Result was: " .. 
		    		 (ngx.var.ssl_client_verify or "(none)") .. 
				 "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
		    		 "<br>signed by " .. (ngx.var.ssl_client_i_dn or "(none)"))	    
	    	'; 
    	}

	## the nginx error when for when the client did not present the required certificate.
	## (TODO: isn't that a 403???)
	error_page  496              /496.html;
	location = /496.html {
    	    content_by_lua '
	        ngx.say("<h1>496 - Error with certificate</h1><p>Result was: " .. 
		    		 (ngx.var.ssl_client_verify or "(none)") .. 
		    		 "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
		    		 "<br>signed by " .. (ngx.var.ssl_client_i_dn or "(none)"))	    
	    	'; 
    	}

	## place where we store the template files for the scripts.
	location /template {
	    internal; 
	}

	## keep memc INTERNAL or you open your database to the world...
	location /memc {
	    internal;
	    set $memc_key $arg_key;
	    memc_pass numbers_store;
	}

    }
    