Thanks for all the pointers to my client certificate crypto proposal.

I'll try to clarify what Eccentric Authentication is and is
not. First, what it is not.

What Eccentric Authentication is not:

*Not a FIM

Ecca is not a Federated Identity Management platform. FIMs are good in
settings where trust is decreed, like in a company.

FIMs are designed to allow participants to recognize each other. And
to identify these participants to outsiders.

For example, a bank uses a FIM to identify all employees. As customer
I can reject all messages from scammers because these messages are not
validated by the FIM.

Ecca is not a FIM.

*Email address identity

I have my own vanity domain, and I use it as my primary email
address. My email address is almost a synonym for my real name. That,
in turn implies that every account that is linked to my email addres
is tied to my meat space identity too.

With my use of SPF to prevent spammers from abusing my email address I
have less opportunity to repudiate (to lie) about the origin of a
message that I might regret at a later date. I must therefore be very
careful with what I write and blog about.

I would hazard a guess that most email addresses are tied to meat
space identities, given the pervasiveness of data tracking and
profiling. It's just a matter of when it becomes visible.

*Fully validated Certificates

A fully validated global CA certificate is a digital identity tied to
your real meat space identity.

When you use a fully validated certificate, all your actions and
messages are tagged with your real identity for life.

These certificates are good for public functions, like Public
Notaries, or governmental publications where that is a good thing to
have.

*Lousy Validated Certificates

A Lousy Validated Certificate is a Certificate whose validations have
been granted on shaky grounds. Most likely, the "validation" is
"control" of an email address. 
 
These certificates are good for nothing. They should die.

*Not Persona/BrowserID

Mozillas Persona/BrowserID is a FIM with a Lousy Validated certificate
based upon email "validation". No Thanks.


*Yet-Another-Account

What the Y-A-A problem actually is, is a roadblock that web site
owners impose upon their visitors. As the internet is mostly
anonymous in nature, site owners want to recognize return visitors. 

On itself the login procedure is not too taxing but with so many sites
requiring it, it becomes a burden. And with email address tied to the
users' meat space identity, it can be a high price for a comment on a blog.

Often times, too much of a burden that visitors turn away, never to return. 

While there are ways to get a temporary email address at an anonymity
provider, using these only increase the burden.

Good use of Ecca with useful browser support can solve the Y-A-A
problem.

**What makes Eccentric Authentication different.

*password replacement

Eccas first purpose is a system to manage an account at a site. It
replaces the hassles that come with passwords. It provides the user
with a method to register at the site and later log in to it. The
site can recognise the user at later visits.

*no third party

Users request a certificate _from the site_ where they want to sign up
to. Users do not have to deal with any third party. The site itself
runs the signer. For example, a blog site signs the certificates only
for it's own site. With the certificate and the private key, the user
can log in to the site.

*no identity validations

An Ecca signer does not validate identities before signing a
certificate.  Ecca has only one requirement, the username (CN) must be
unique at the site.

There are no validation of email addresses, identities, nothing. Each
certificate is just that, a unique username for a site. The owner of
the private key controls the use of the account at the site.

*benefits

This simple set up already gives us some benefits:
- no more weak passwords, people can't memorize strong passwords anyway;

- no more lost passwords, browsers will handle that with the help of
  cloud backup and synchronisation;

- on the server side, there is no need to store a username/password
  database. As soon as the certificate is signed, it contains all
  details needed to proces logins: username, users' public key,
  signature by sites' own CAkey.  
  There is no data to steal from the site, except the contents of the
  blogs. And that's mostly public anyway. Security requirements are
  simpler (for simple sites). If you would store more privacy
  sensitive user data your security requirements would increase
  accordingly.

*end of Y-A-A

With Ecca certificates we can end the dreaded Yet-Another-Account
roadblock.

We solve it by creating even more accounts. But we make account
creation completely automatic. All it requires is one click from the
user to sign up when he decides to.

For this me must change the browser into a User Agent that puts the
users' requirements first. Most browsers severly lack in this
department.

Let me introduce a browser plug in. It takes care of all the
crypto-details to make sure people do not have to do rsa-calculations
by head. :-) 

The plug in has the properties that it can:
- recognize the site (via web-domain);
- recognize whether a certificate is needed (a http-return code) 
  and log in with one;
- handle the whole certificate request process automatically.

When you browse to a site that requires you to create an account, the
plug in (not the site) gives you two buttons:

 - "Sign up"; it asks for a username and performs the registration;

 - "Sign up anonymous": it creates a random username and signs up with
   it.

As soon as you have pressed the button, the browser will create the
certificate request and register at the sites' own CA. Then the plug
in logs you in with the freshly signed certificate.

/Notice, it is the plug in that shows the buttons, does the account
creation and login, not the site. There is not even a log in page on
the site./

When you later browse to the site again, the plug in recognizes the
site, remembers the account and offers you to log in with the
previously generated certificate. Just click on the button.

You could even tell your browser to always log you in when you
navigate there. 

The user can also create multiple accounts a single site. For example,
at a blog site, a user can write about parenting and politics under
different identities while the plugin takes care of the identity
and session management. (and onion routing).

The plug in also offers a log out button that ends the authenticated
session so later visits to the site are anonymous again. It also needs
to delete all session data, like cookies, caches and so on.

If there is a need, there could even be a "Na-Na-Na"-button in the
plug in that creates a random username, uses it for the current session
and deletes the key and certificate directly afterwards. This gives
you a completely new identity every time you visit the
site. Certificates are cheap. Use them aplenty.

Right now, site owners might not be so happy to allow Ecca
certificates. It gives the visitor the freedom to choose under which
username to log in at any time.

With a good plug in, it's easier for visitors to use certificates than
to create an account and password manually. This could nugde site
owners to migrate towards Ecca.

I do believe that once critical mass is achieved every site will
accept Ecca and passwords will be a memory.

