## nginx.conf for localCA-server
## 
## We set the PREFIX to ./temp to prevent clutter in our source directory
## All file references are relative to ../nginx.conf (this file)

#user  nobody;
worker_processes  1;

error_log logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid  nginx.pid;


events {
    worker_connections  1024;
}

## path are relative to nginx-prefix.
env CACERT=../subCA/subcacert.pem;
env CAKEY=../subCA/private/subcakey.pem;




http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type  text/html;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    log_format  ssl_log  '$remote_addr - $remote_user "$request" '
                         '$status $body_bytes_sent  '
                         '$ssl_client_verify - "$ssl_client_i_dn" - "$ssl_client_s_dn" - "$ssl_client_serial"';

    access_log   logs/ssl_log  ssl_log;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    ## The memcacheDB stores the certificates for each CN.
    ## Notice, it's a memcacheDB, ie permanent storage in BerkeleyDB files. (Not memcached, a transient cache)
    upstream memcacheDB_cn {
        server 127.0.0.1:21201;
	keepalive 32;
    }

    lua_package_cpath '../ecca_lib/?.so;;';

    # HTTPS server
    # Runs the open pages, ie, accessible to anyone.
    server {
        listen               7444;
	keepalive_timeout    70;
        server_name   	     localhost;

        ssl                  on;
        ssl_certificate      demoCA/server-cert.pem;
        ssl_certificate_key  demoCA/server-key.pem;

        ssl_session_timeout  10m;
	ssl_session_cache    shared:SSL:10m;

        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers          HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   off;

	## we set to optional so we can allow some pages non-authenticated (help pages and errors)
	## ssl_verify_client      optional;

	## this is important, we accept clients only when signed by our own localCA!
	## ssl_client_certificate ../localCA/rootCA/cacert.pem;

	lua_code_cache off;


        location / {
	    ## show welcome page and link to CA to register
	    root  ../htdocs;
	    index index.html;
        }

	# pass the LUA scripts to FastCGI server listening on 127.0.0.1:9000
	#location ~ \.lua$ {
        #    root           ../scripts;
        #    fastcgi_pass   127.0.0.1:9000;
        #    #fastcgi_index  index.php;
        #    #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    #include        fastcgi_params;
        # }

	location /register {
	    limit_except POST { allow all; }
	    content_by_lua_file ../register.lua;
	}

	location /register-genkey {
	    limit_except POST { allow all; }
	    content_by_lua_file ../register-genkey.lua;
	}

	location /register-spkac {
	    limit_except POST { allow all; }
	    content_by_lua_file ../register-spkac.lua;
	}

	## Allow everyone to query the CN->certificate mappings.
	## Make sure it's read only or we allow people to write to our memcacheDB!
	location /check-nickname-available {
	    limit_except GET { allow all; }
	    echo_exec /memcacheDB-cn?cmd=get&key=$arg_nickname;
  	}

	## This queries the CN->certificate datastore.
	## It allows all memcache-methods (get, set, add, delete, flush) so keep it internal!
	location /memcacheDB-cn {
	    internal;
    	    set  $memc_key  $arg_key;
    	    memc_pass memcacheDB_cn;
	}


	# xyzzy	
	## no authentication provided, show page with link to CA to sign up. 	
	# error_page  401	     	     /401.html;
	# location = /401.html {
    	#     content_by_lua '
	#         ngx.say("<h1>401 - Authorization requested</h1><p>Result was: " .. 
	# 			(ngx.var.ssl_client_verify or "(none)") .. 
	# 		        "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
	# 	    		"<br>sig	ned by " .. (ngx.var.ssl_client_i_dn or "(none)"))	    
	#     	'; 
	# }
	
	# ## wrong authentication provided, tell user to log out and try a different one (of this CA!).
	# error_page  403              /403.html;

	# ## the nginx error when for when there is an error in client certification
	# ## ask customer to provide certificate from right authority or have them create a new identity
	# error_page  495              /495.html;
	# location = /495.html {
    	#     content_by_lua '
	#         ngx.say("<h1>495 - Wrong certificate authority</h1><p>Result was: " .. 
	# 	    		 (ngx.var.ssl_client_verify or "(none)") .. 
	# 			 "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
	# 	    		 "<br>signed by " .. (ngx.var.ssl_client_i_dn or "(none)"))	    
	#     	'; 
    	# }

	# ## the nginx error when for when the client did not present the required certificate. (TODO: is that a 403???)
	# error_page  496              /496.html;
	# location = /496.html {
    	#     content_by_lua '
	#         ngx.say("<h1>496 - missing certificate authority</h1><p>Result was: " .. 
	# 	    		 (ngx.var.ssl_client_verify or "(none)") .. 
	# 	    		 "<br>You gave certificate " ..  (ngx.var.ssl_client_s_dn or "(none)") .. 
	# 	    		 "<br>signed by " .. (ngx.var.ssl_client_i_dn or "(none)"))	    
	#     	'; 
    	# }
    }
    
}
