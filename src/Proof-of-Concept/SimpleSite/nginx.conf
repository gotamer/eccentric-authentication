## nginx.conf for localCA
## 
## We set the PREFIX to ./temp to prevent clutter in our source directory
## make sure all data references ../  back to the source

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       ../mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # server {
    #     listen       80;
    #     server_name  localhost;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   share/nginx/html;
    #         index  index.html index.htm;
    #     }

    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   share/nginx/html;
    #     }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     #location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     #}

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     #location ~ \.php$ {
    #     #    root           share/nginx/html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     #}

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     #location ~ /\.ht {
    #     #    deny  all;
    #     #}
    # }


    # HTTPS server
    # Runs the open pages, ie, accessible to anyone.
    server {
        listen               7443;
	keepalive_timeout    70;
        server_name   	     simplesite;

        ssl                  on;
        ssl_certificate      ../cert.pem;
        ssl_certificate_key  ../cert.key;

        ssl_session_timeout  10m;
	ssl_session_cache    shared:SSL:10m;

        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers          HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;

	## we set to optional so we can allow some pages non-authenticated (help pages and errors)
	ssl_verify_client      optional;

	## this is important, we accept clients only when signed by our own localCA!
	ssl_client_certificate ../../../localCA/rootCA/cacert.pem;

        location / {
	    ## show welcome page and link to CA to register
	    root  ../htdocs;
	    index index.html;
        }

	## no authentication provided, show page with link to CA to sign up. 	
	error_page  401	     	     ../401.html;

	## wrong authentication provided, tell user to log out and try a different one (of this CA!).
	error_page  403              ../403.html;

	## the nginx error when for when there is an error in client certification
	## ask customer to provide certificate from right authority or have them create a new identity
	error_page  495              ../495.html;
	    #location = /495.html {
    	    #    content_by_lua '
	    #	    ngx.say("Result was: " .. ngx.var.ssl_client_verify .. "<br>You gave certificate " ..  ngx.var.ssl_client_s_dn .. " signed by " .. ngx.var.ssl_client_i_dn)	    
	    #	'; 
    	    #}
	## the nginx error when for when the client gave a valid but wrong cert. (TODO: is that a 403???)
	error_page  496              ../496.html;

	## Note: secure is a subdirectory of htdocs, still our section overrides 'location /' above 
	## by being more specific.
	location /secure {
	    access_by_lua '
	        if ngx.var.ssl_client_verify == "SUCCESS|" then
		    return
		end
		ngx.exit(401)
	    ';
	    ## show some static pages
	    root  ../htdocs;
	    index index.html;

	    ## could do proxying to application server with proxypass, fcgi, etc.
	    ## proxypass http://localhost:xxx/;
	    ## proxy_redirect  off;
	    ## proxy_set_header Host                $host;
	    ## proxy_set_header X-Real-IP           $remote_addr;
            ## proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
            ## proxy_set_header X-SSL-Client-Verify $ssl_client_verify;   ## Returns SUCCESS, FAILED, or NONE
            ## proxy_set_header X-SSL-Client-S-DN   $ssl_client_s_dn;     ## subject DN
            ## proxy_set_header X-SSL-Client-I-DN   $ssl_client_i_dn;     ## issuer DN
            ## proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
	}
    }
    
}
