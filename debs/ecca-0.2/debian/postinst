#!/bin/sh
# postinst script for ecca
#
# see: dh_installdeb(1)

set -ex


. /usr/share/debconf/confmodule

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

    ## IMPORTANT
    ## Do NOT remove the Root- or SubCA-keys and Certificate at any cause.
    ## They could be in use, voiding all user's client certificates, disabling them access.

    ## Even when removing the package, leave the whole CA-structure in place.

case "$1" in
    configure)
    [ ! -e /etc/ecca/rootCA/crlnumber ] && echo '01' > /etc/ecca/rootCA/crlnumber
    [ ! -e /etc/ecca/rootCA/serial ]    && echo '00' > /etc/ecca/rootCA/serial
    [ ! -e /etc/ecca/rootCA/index.txt ] && touch       /etc/ecca/rootCA/index.txt

    [ ! -e /etc/ecca/subCA/crlnumber ]  && echo '01' > /etc/ecca/subCA/crlnumber
    ## no need to set up serial and index.txt files for SubCA.

    db_get ecca-ca/countrycode         ; COUNTRY=${RET:?missing value for countrycode}
    db_get ecca-ca/state-or-province   ; STATE=${RET:-\.}
    db_get ecca-ca/locality            ; CITY=${RET:?missing value for locality}
    db_get ecca-ca/organization        ; ORG=${RET:?missing value for organization}
    db_get ecca-ca/email-address       ; EMAIL=${RET:?missing value for email-address}
    db_get ecca-ca/organizational-unit ; ORGUNIT=${RET:-\.}
    db_get ecca-signer/servername      ; SERVERCN=${RET:?missing value for servername}
    db_get ecca-sample/servername      ; SAMPLECN={$RET:?missing value for sample server name}

    ROOTCONF=/etc/ecca/rootCA/openssl-rootca.cnf
    SUBCONF=/etc/ecca/subCA/openssl-subca.cnf
    if [ ! -e $ROOTCONF ]
    then
	#warn "Configuring $ROOTCONF"
	sed -e "{s/^\( *countryName *\)=.*$/\1= $COUNTRY/"} \
	    -e "{s/^\( *stateOrProvinceName *\)=.*$/\1= $STATE/"} \
	    -e "{s/^\( *localityName *\)=.*$/\1= $CITY/"} \
	    -e "{s/^\( *organizationName *\)=.*$/\1= $ORG/"} \
	    -e "{s/^\( *organizationalUnitName *\)=.*$/\1= $ORGUNIT/"} \
	    -e "{s/^\( *emailAddress *\)=.*$/\1= $EMAIL/"} \
	    < $ROOTCONF.example > $ROOTCONF

	#warn "Configuring $SUBCONF"
	sed -e "{s/^\( *countryName *\)=.*$/\1= $COUNTRY/"} \
	    -e "{s/^\( *stateOrProvinceName *\)=.*$/\1= $STATE/"} \
	    -e "{s/^\( *localityName *\)=.*$/\1= $CITY/"} \
	    -e "{s/^\( *organizationName *\)=.*$/\1= $ORG/"} \
	    -e "{s/^\( *organizationalUnitName *\)=.*$/\1= $ORGUNIT/"} \
	    -e "{s/^\( *emailAddress *\)=.*$/\1= $EMAIL/"} \
	    < $SUBCONF.example > $SUBCONF


	ROOTCSR=`mktemp`
	SUBCSR=`mktemp`
	SERVERCSR=`mktemp`
	SAMPLECSR=`mktemp`

	#warn "Creating self signed RootCA private key pair and certificate"

	ROOTCAKEY=/etc/ecca/rootCA/private/cakey.pem
	ROOTCACERT=/etc/ecca/rootCA/cacert.pem

	openssl genrsa -out $ROOTCAKEY 4096
	openssl req -config $ROOTCONF -new -key $ROOTCAKEY -text -out $ROOTCSR
	openssl ca  -config $ROOTCONF -out $ROOTCACERT -days 3652 \
	    -keyfile $ROOTCAKEY -selfsign -extensions v3_ca -batch -infiles $ROOTCSR

	rm -f $ROOTCSR

	#warn "Creating SubCA private key pair and sign it with the RootCA"

	SUBCAKEY=/etc/ecca/subCA/private/subcakey.pem
	SUBCACERT=/etc/ecca/subCA/subcacert.pem

	openssl genrsa -out $SUBCAKEY 2048
	openssl req -config $SUBCONF -new -key $SUBCAKEY -text -out $SUBCSR
	openssl ca -config $ROOTCONF -out $SUBCACERT -days 31 -keyfile $ROOTCAKEY \
	    -extensions v3_ca -batch -infiles $SUBCSR

	rm -f $SUBCSR

	CHAINED=/etc/ecca/subCA/chained-cacert.pem

	#warn "Creating chained certificate for client authentication in $CHAINED"
	cat $SUBCACERT $ROOTCACERT > $CHAINED

	# warn "Creating server certificate for ecca-server signed with RootCA

	SERVERKEY=/etc/ecca/web/ecca-server-key.pem
	SERVERCERT=/etc/ecca/web/ecca-server-cert.pem
	openssl genrsa -out $SERVERKEY 2048
	openssl req -new -key $SERVERKEY -out $SERVERCSR \
	    -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORG/OU=$ORGUNIT/CN=$SERVERCN"
	openssl ca -config $ROOTCONF -out $SERVERCERT -days 365 -keyfile $ROOTCAKEY \
	    -extensions usr_cert -batch -infiles $SERVERCSR

	rm -f $SERVERCSR

	# warn "Creating server certificate for ecca-sample-site signed with RootCA

	SAMPLEKEY=/etc/ecca/sample/sample-server-key.pem
	SAMPLECERT=/etc/ecca/sample/sample-server-cert-chain.pem
	openssl genrsa -out $SAMLEKEY 2048
	openssl req -new -key $SAMPLEKEY -out $SAMPLECSR \
	    -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORG/OU=$ORGUNIT/CN=$SAMPLECN"

	openssl ca -config $ROOTCONF -out $SAMPLECERT -days 365 -keyfile $ROOTCAKEY \
	    -extensions usr_cert -batch -infiles $SAMLPECSR

	rm -f $SAMPLECSR
    fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
