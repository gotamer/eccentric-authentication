...continuation of response-txt

**Why certificates

Most of the benefits I described above can also be reached with other
mechanisms. 
 

There is a compelling argument why I choose certificates:

	/a certificate is an identity that can be addressed/

Users can address each other on the site by their chosen
usernames.  UserX[at]SiteY. 

In fact, someone from this list created an account called 'cc' at my
site. I don't know who did. All I have is an IP-address.

By creating the account, that person has a private key that matches
the public key in the certificate. 

Anyone can fetch this certificate with:

   wget --no-check-certificate -O cc.cert \
   	'https://register.ecca.wtmnd.nl/get-certificate?nickname=cc' 

From there it's a small step to create an encrypted message with
the public key within the certificate.

The cc-person can leave a message on any message board signed with the
private key. In the message is a url pointing to the certificate so
anyone can retrieve the key, you can validate it against my CA and return a
message readable only to 'cc'.

It's is just like any other use of a client certificate except that
you can communicate securely with a complete stranger.

Example, a dating site

A dating site lets people register with ecca-certificates. The
certificate is used for access control to the site and to allow
members to write personal messages to other members. A new
browser plug in takes care of the message encrypting, the dating site
takes care of delivery. When you receive a reply, the certificate
tells you that it is indeed from the person you wrote to.

The dating site can't read these private messages. As it should be.

Would a member of the site behave unappropriately, the person
complaining can file this complaint at the site, revealing the signed
messages and when the dating site operators agree, the offenders' account
gets closed.

The account gets closed by blacklisting the certificate at the
site. The certificate stays valid but the site won't allow neither log
in nor message delivery, which requires log in. The only option for
the offender is to open a new account and pay the membership fees
again if he wants to try to contact the same person again.

As long as the complaining person did not reveal any other identities,
the offender cannot reach this person anymore.
 
When the communication between the dating site members becomes
physical, both unsubscribe at the site to make their profile
unavailable and then delete their private key and certificate to hide
any trail of messages. 

Would the offender ever use that certificate for communication that
requires him to go public with his meat space identity, he gives the
Person-of-Interest an ability to blackmail him with his past
behaviour. It's in his best interest to delete the certificate and the
private key that he used in bad manners and use a new identity (most likely
from another site).

Trust considerations

When you decide to hand your money to the dating site for a chance to
meet people of interest, you've made a trust-decision. You never have
to make decision whether to trust the cryptography. 

The site-owners better
makes sure it's in order or they will be nailed at the gallows of the
internet for being unreliable.

And if they turn out to be crooks, creating fake accounts and
monitoring all your supposed secure communication, you only lost some
money, not your meat space identity. (You did pay with bitcoin did
you?)

DNSSEC/DANE


I mentioned that the identity consists of two parts. One part is the
username. The other part is the site name.

Human readable identities

There is a one-to-one mapping between usernames at a site and
certificates it has signed. The username is a human-readable
identifier for the certificate. Given a username for a site, you can
retrieve the certificate that enables you to establish a secure
channel.

As each site has its own CA, there is a one-to-one mapping between
site names and CA-certificates. When you have the site's
CA-certificate you can validate each username.

What we need is a mapping from site name to certificate in a way that
allows to make that mapping.

There is the solution: it's called DNSSEC with DANE.

With DNSSEC and DANE we make the mapping between site name and sites'
certificate.

You can refer to a site by its site name and retrieve both the
IP-address and the Root certificate that the site-owner published
there. It's all signed with DNSSEC, from the site-level to tld-level
to the DNSSEC Root Anchor.

Now, If we would use DNSSEC, we need to trust the DNSSEC Root Anchor. 

Trust, but verify

With monitoring mechanisms such as CMU Perspectives, Moxie
Marlinspikes' Convergence, Certificate Pinning in user agents,
Certificate Patrol, Petname systems and probably a dozen other we have
a way to detect tampering with the DNSSEC key chains from the top to the end points.

That allows us to put trust in it to bootstrap the Ecca system.

End run around Zooko's triangle.

That trust in DNSSEC allows to create a secure mapping from site name
to the sites' CA. That creates the trust in the mapping from user
names to local certificates. 

With that chain of trust, you can tell your mother your user name over
the phone and her user-agent can retrieve the correct certificate to
create a secure channel with your computer.

Just spell the name:

     	cc[at]www.ecca.wtmnd.nl.


Deployment

The good news, we can bootstrap the Eccentric Authentication system with the tools that are currently available. We "just" need to write a few browser plugins.

a register/log in plug in;
a secure message plug in;
a DNSSEC/DANE TLSA plug in.